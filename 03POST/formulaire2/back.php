

<h1>back</h1>

<?php
      

      
      // ‚úÖ Protection contre les acc√®s directs sans POST
      if ($_SERVER["REQUEST_METHOD"] === "POST") {
          
          // üîê S√©curiser l'acc√®s aux champs POST (avec v√©rification d'existence)
          $nom = isset($_POST['auteur']) ? htmlspecialchars($_POST['auteur']) : 'Non fourni';
     
          $description = isset($_POST['description']) ? htmlspecialchars($_POST['description']) : 'Non fournie';
      
          // üîê S√©curiser l'acc√®s aux param√®tres GET
          $id = isset($_GET['id']) ? htmlspecialchars($_GET['id']) : 'Non sp√©cifi√©';
          $type = isset($_GET['type']) ? htmlspecialchars($_GET['type']) : 'Non sp√©cifi√©';
      
          // ‚úÖ Affichage des donn√©es
          echo "<h1>Donn√©es re√ßues :</h1>";
          echo "<p><strong>ID (GET)</strong> : $id</p>";
          echo "<p><strong>Type (GET)</strong> : $type</p>";
          echo "<p><strong>Nom (POST)</strong> : $nom</p>";
   
          echo "<p><strong>Description (POST)</strong> : $description</p>";
      
      } else {
          // üîí Protection : rediriger ou message
          echo "<p>‚ö†Ô∏è Ce script doit √™tre acc√©d√© via un formulaire POST.</p>";
      }
      //-----------------------
      // La superglobale $_POST
      //-----------------------
      // $_POST est une superglobale qui permet de r√©cup√©rer les donn√©es saisies dans un formulaire.
      
      // $_POST est une superglobale, donc un array. Il est disponible dans tous les contextes du script, y compris au sein des fonctions.
      
      // Syntaxe de $_POST : $_POST = array('name1' => 'valeur input1', 'nameN' => 'valeur inputN');
      
      
      
      var_dump($_SERVER);
      ?>



<!-- 
La fonction htmlspecialchars() en PHP est utilis√©e pour convertir des caract√®res sp√©ciaux en entit√©s HTML. Cela est principalement fait pour pr√©venir les attaques par injection de code, comme le Cross-Site Scripting (XSS), o√π des scripts malveillants peuvent √™tre ins√©r√©s dans les donn√©es qui seront ensuite affich√©es sur une page web. L'utilisation de htmlspecialchars() aide √† s√©curiser votre application en s'assurant que les donn√©es affich√©es ne seront pas ex√©cut√©es comme du code HTML ou JavaScript.
 -->
<!-- 
Dans le script PHP que vous avez partag√©, $_SERVER est une superglobale en PHP qui contient des informations sur les en-t√™tes, chemins, et emplacements de scripts. La superglobale $_SERVER est un tableau contenant des informations telles que les en-t√™tes HTTP, les chemins des scripts et les emplacements des scripts. Les valeurs de ce tableau sont g√©n√©r√©es par le serveur web.

Utilisation de $_SERVER["REQUEST_METHOD"]
Dans votre script, $_SERVER["REQUEST_METHOD"] est utilis√© pour d√©terminer la m√©thode HTTP avec laquelle la page a √©t√© demand√©e. Les m√©thodes HTTP les plus courantes sont GET et POST.

"POST" : Indique que les donn√©es ont √©t√© envoy√©es au serveur √† partir d'un formulaire. La m√©thode POST est souvent utilis√©e lorsque les donn√©es du formulaire sont envoy√©es car elle est plus s√©curis√©e que GET ; les donn√©es ne sont pas visibles dans l'URL.
Votre code v√©rifie si la m√©thode de requ√™te est POST avant de proc√©der au traitement des donn√©es du formulaire. Si la m√©thode est POST, cela signifie que l'utilisateur a probablement soumis un formulaire et que le script doit alors traiter ces donn√©es.


V√©rification de la m√©thode : Le script commence par v√©rifier si la m√©thode de requ√™te est POST √† l'aide de $_SERVER["REQUEST_METHOD"] == "POST". Cela permet de s'assurer que le script traite les donn√©es uniquement si elles ont √©t√© envoy√©es par un formulaire utilisant cette m√©thode.

Affichage des donn√©es : Si la m√©thode est POST, le script affiche un bloc HTML avec les r√©sultats. Il utilise htmlspecialchars() pour nettoyer les donn√©es du formulaire re√ßues via $_POST (qui est une autre superglobale en PHP utilis√©e pour collecter des donn√©es de formulaire envoy√©es par m√©thode POST). Cette fonction convertit les caract√®res sp√©ciaux en entit√©s HTML, ce qui emp√™che l'ex√©cution de scripts malveillants (XSS).

S√©curit√©
L'utilisation de htmlspecialchars() est cruciale pour s√©curiser l'affichage des donn√©es entr√©es par l'utilisateur, car sans cela, un utilisateur malveillant pourrait ins√©rer du code JavaScript ou d'autres √©l√©ments HTML qui pourraient √™tre ex√©cut√©s par le navigateur, menant √† des vuln√©rabilit√©s de type Cross-Site Scripting (XSS).


-->