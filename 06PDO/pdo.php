<<?php
// Affiche toutes les erreurs √† l'√©cran (utile en d√©veloppement, √† d√©sactiver en production)
ini_set('display_errors', 1);
error_reporting(E_ALL);

/**
 * Fonction utilitaire pour afficher proprement les tableaux et objets
 * Utile pour le d√©bogage
 *
 * @param mixed $param Variable √† afficher
 */
function debug($param)
{
    echo '<pre>';
    print_r($param);
    echo '</pre>';
}

// ===========================
// ‚öôÔ∏è Connexion √† la base de donn√©es avec PDO
// ===========================

// Cha√Æne de connexion DSN (Data Source Name)
$dsn = "mysql:host=localhost;dbname=societe"; // Remplacer 'societe' par le nom r√©el de votre base
$user = "root"; // Nom d'utilisateur MySQL
$password = "votre_mot_de_passe"; // Mot de passe de l'utilisateur MySQL

try {
    /**
     * Cr√©ation d'une instance PDO pour la connexion √† la base de donn√©es
     *
     * PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION : active le mode exception pour la gestion des erreurs SQL
     * PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC : les r√©sultats seront r√©cup√©r√©s sous forme de tableau associatif
     * PDO::ATTR_EMULATE_PREPARES => false : d√©sactive l'√©mulation des requ√™tes pr√©par√©es (meilleure s√©curit√© et performance)
     */
    $pdo = new PDO($dsn, $user, $password, [
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
        PDO::ATTR_EMULATE_PREPARES => false
    ]);
} catch (PDOException $exception) {
    // Affichage de l'erreur si la connexion √©choue
    echo "Erreur de connexion √† la base de donn√©es : " . $exception->getMessage();
    exit;
}

// C‚Äôest un m√©canisme de gestion d‚Äôerreurs en PHP, qui permet :

// ‚úÖ D‚Äôessayer un bloc de code potentiellement risqu√© (try)
// ‚úÖ Et de r√©agir proprement si une erreur survient (catch)
// ‚úÖ Sans interrompre brutalement tout ton script ‚ö†Ô∏è

// üîê Pourquoi c‚Äôest indispensable ?
// Sans try...catch :
// Si la connexion √©choue, PHP affiche une erreur fatale

// Le script s‚Äôarr√™te brutalement

// L‚Äôutilisateur voit un message syst√®me non s√©curis√©

// Avec try...catch :
// Tu interceptes l‚Äôerreur (ex: mot de passe incorrect, serveur indisponible‚Ä¶)

// Tu peux afficher un message personnalis√© et plus clair

// Tu gardes le contr√¥le sur le script

// üßØ PDOException c‚Äôest quoi exactement ?
// PDOException est une classe d‚Äôerreur (Exception) sp√©cifique √† PDO.

// Elle capture tous les probl√®mes li√©s √† :

// la connexion √† la base,

// l‚Äôex√©cution de requ√™tes,

// l‚Äôacc√®s √† des colonnes inexistantes,

// etc.

// Et elle permet de r√©cup√©rer des d√©tails utiles :

// ===========================
// üîç Exploration de l'objet PDO
// ===========================

debug(get_class_methods($pdo)); // Affiche toutes les m√©thodes de l'objet PDO


// Liste toutes les m√©thodes disponibles dans l'objet $pdo (de la classe PDO)


/**
 * üìÑ Liste comment√©e des m√©thodes PDO principales :
 *
 * Note : certaines m√©thodes sont internes ou rarement utilis√©es, on se concentre ici sur les plus importantes.
 */

// -----------------------------------------
// M√©thodes pour ex√©cuter des requ√™tes
// -----------------------------------------

/**
 * prepare(string $query): PDOStatement
 * Pr√©pare une requ√™te SQL avec des param√®tres, pour une ex√©cution s√©curis√©e.
 */
//$pdo->prepare("INSERT INTO users (nom) VALUES (:nom)");

/**
 * query(string $query): PDOStatement
 * Ex√©cute directement une requ√™te SQL de type SELECT (r√©sultats attendus).
 */
//$pdo->query("SELECT * FROM employes");

/**
 * exec(string $query): int|false
 * Ex√©cute une requ√™te SQL (INSERT, UPDATE, DELETE) sans retour de r√©sultats.
 * Retourne le nombre de lignes affect√©es.
 */
//$pdo->exec("DELETE FROM employes WHERE id=3");

// -----------------------------------------
// M√©thodes pour la gestion de transactions
// -----------------------------------------

/**
 * beginTransaction(): bool
 * D√©marre une transaction manuelle.
 */
//$pdo->beginTransaction();

/**
 * commit(): bool
 * Valide toutes les op√©rations faites depuis beginTransaction().
 */
//$pdo->commit();

/**
 * rollBack(): bool
 * Annule toutes les op√©rations faites depuis beginTransaction().
 */
//$pdo->rollBack();

// -----------------------------------------
// M√©thodes utilitaires
// -----------------------------------------

/**
 * lastInsertId(): string
 * Retourne l'ID auto-incr√©ment√© g√©n√©r√© par la derni√®re requ√™te INSERT.
 */
//$pdo->lastInsertId();

/**
 * errorCode(): string|null
 * Retourne le code d'erreur SQLSTATE de la derni√®re op√©ration.
 */
//$pdo->errorCode();

/**
 * errorInfo(): array
 * Retourne un tableau avec des informations d√©taill√©es sur l'erreur SQL.
 */
//$pdo->errorInfo();

// -----------------------------------------
// M√©thodes de configuration PDO
// -----------------------------------------

/**
 * getAttribute(int $attribute): mixed
 * R√©cup√®re la valeur d‚Äôun attribut de la connexion PDO (ex: mode de fetch par d√©faut).
 */
//$pdo->getAttribute(PDO::ATTR_ERRMODE);

/**
 * setAttribute(int $attribute, mixed $value): bool
 * Modifie un attribut de la connexion PDO (par exemple, activer les exceptions).
 */
//$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

// -----------------------------------------
// M√©thodes pour la gestion de connexions multiples
// -----------------------------------------

/**
 * quote(string $string, int $parameter_type = PDO::PARAM_STR): string
 * Prot√®ge une cha√Æne pour l'injecter litt√©ralement dans une requ√™te SQL (moins utilis√© car `prepare()` est meilleur).
 */
//$pdo->quote("Robert'; DROP TABLE users; --");

// Certaines autres m√©thodes internes peuvent appara√Ætre selon le driver install√©.


debug(get_object_vars($pdo));   // Affiche les propri√©t√©s internes (souvent vide pour PDO)

// ===========================
// üì§ Requ√™te avec exec() - pour INSERT / UPDATE / DELETE
// ===========================

/**
 * La m√©thode exec() ex√©cute une requ√™te SQL ne retournant pas de jeu de r√©sultats (ex : INSERT)
 * Elle retourne le nombre de lignes affect√©es, ou false en cas d'erreur
 */
$nbLignes = $pdo->exec("
    INSERT INTO employes (prenom, nom, sexe, service, date_embauche, salaire)
    VALUES ('daniel', 'Baugrand', 'm', 'informatique', '2016-03-08', 500)
");

// exec() ex√©cute une requ√™te directement, sans protection contre les injections SQL.
// C‚Äôest parfait pour du code en dur, mais dangereux si on y ins√®re des donn√©es utilisateur ‚ùó

echo "‚úîÔ∏è Nombre de lignes ins√©r√©es : $nbLignes <br>";
echo "üÜî Dernier ID ins√©r√© : " . $pdo->lastInsertId(); // ID auto-incr√©ment√© g√©n√©r√© par la derni√®re requ√™te

// Exemple de suppression (non ex√©cut√© ici pour conserver les donn√©es)
// $pdo->exec("DELETE FROM employes WHERE prenom = 'daniel'");



// Connexion PDO s√©curis√©e
// $pdo = new PDO("mysql:host=localhost;dbname=societe", "root", "votre_mot_de_passe", [
//     PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
//     PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC
// ]);

// Exemple de donn√©es re√ßues via formulaire (en POST)
$prenom  = $_POST['prenom'] ?? '';
$nom     = $_POST['nom'] ?? '';
$sexe    = $_POST['sexe'] ?? '';
$service = $_POST['service'] ?? '';
$date_embauche = $_POST['date_embauche'] ?? '';
$salaire = $_POST['salaire'] ?? 0;

// Requ√™te pr√©par√©e pour insertion s√©curis√©e
$sql = "INSERT INTO employes (prenom, nom, sexe, service, date_embauche, salaire) 
        VALUES (:prenom, :nom, :sexe, :service, :date_embauche, :salaire)";

// $sql = "...";
// Tu stockes ta requ√™te SQL dans une variable appel√©e $sql.

// Cela permet ensuite de la pr√©parer avec PDO (via $pdo->prepare($sql)), et de l‚Äôex√©cuter avec les valeurs dynamiques.

/**
 * INSERT INTO employes (...)
*C'est une requ√™te d'insertion (INSERT) qui dit √† MySQL :

*‚ÄúJe veux ajouter une nouvelle ligne dans la table employes‚Äù.

*employes est le nom de la table dans ta base de donn√©es.

*Les champs list√©s entre parenth√®ses sont les colonnes dans lesquelles tu veux ins√©rer des donn√©es :
 * VALUES (:prenom, :nom, :sexe, :service, :date_embauche, :salaire)
*Ce sont les valeurs que tu vas ins√©rer dans les colonnes pr√©c√©dentes.

*Mais attention : ici, ce ne sont pas des valeurs fixes ‚ùå

*Ce sont des param√®tres nomm√©s (aussi appel√©s placeholders) ‚úÖ
 * 
 *  Les param√®tres nomm√©s :prenom, :nom, etc.
*Ce sont des marqueurs que PDO va remplacer au moment de l‚Äôex√©cution.

*Avantage : tu ne mets pas directement les donn√©es utilisateur dans ta requ√™te ‚áí tu √©vites les injections SQL üö´üíâ
 * 
 */

$stmt = $pdo->prepare($sql);

// Bind et ex√©cution
$stmt->execute([
    ':prenom'         => $prenom,
    ':nom'            => $nom,
    ':sexe'           => $sexe,
    ':service'        => $service,
    ':date_embauche'  => $date_embauche,
    ':salaire'        => $salaire
]);

echo "‚úîÔ∏è Nouvel employ√© enregistr√© avec succ√®s !";
echo "üÜî ID : " . $pdo->lastInsertId();
?>

<style>
        form {
            max-width: 500px;
            margin: auto;
            padding: 1rem;
            background-color: #f5f5f5;
            border-radius: 8px;
        }

        label {
            display: block;
            margin-top: 10px;
            font-weight: bold;
        }

        input, select {
            width: 100%;
            padding: 0.5rem;
            margin-top: 5px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        button {
            margin-top: 15px;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>

    <h2 style="text-align: center;">Ajouter un nouvel employ√©</h2>

    <form  method="post">
        <label for="prenom">Pr√©nom</label>
        <input type="text" name="prenom" id="prenom" required>

        <label for="nom">Nom</label>
        <input type="text" name="nom" id="nom" required>

        <label for="sexe">Sexe</label>
        <select name="sexe" id="sexe" required>
            <option value="">-- S√©lectionner --</option>
            <option value="m">Masculin</option>
            <option value="f">F√©minin</option>
        </select>

        <label for="service">Service</label>
        <input type="text" name="service" id="service" required>

        <label for="date_embauche">Date d'embauche</label>
        <input type="date" name="date_embauche" id="date_embauche" required>

        <label for="salaire">Salaire (‚Ç¨)</label>
        <input type="number" name="salaire" id="salaire" required min="0" step="0.01">

        <button type="submit">Enregistrer</button>
    </form>


<?php




// ===========================
// üîé Requ√™te avec query() - pour SELECT
// ===========================

/**
 * La m√©thode query() est utilis√©e pour ex√©cuter des requ√™tes SQL retournant un jeu de r√©sultats (ex : SELECT)
 * Elle retourne un objet de type PDOStatement
 */
$result = $pdo->query("SELECT * FROM employes WHERE prenom = 'daniel'");

debug($pdo);    // Affiche les d√©tails de l'objet PDO
debug($result); // Affiche les d√©tails de l'objet r√©sultat (PDOStatement)

/**
 * fetch(PDO::FETCH_ASSOC) permet de r√©cup√©rer une ligne de r√©sultat sous forme de tableau associatif
 * Chaque appel √† fetch() avance d'une ligne
 */
$employe = $result->fetch(PDO::FETCH_ASSOC);

echo "<h3>D√©tails d'un employ√© nomm√© Daniel :</h3>";
var_dump($employe);
debug($employe); // Affichage lisible de l'array

// ===========================
// üìö R√©cup√©ration de plusieurs lignes avec fetchAll()
// ===========================

/**
 * fetchAll() retourne un tableau contenant toutes les lignes du jeu de r√©sultats
 * Chaque ligne est un sous-tableau associatif (gr√¢ce au mode PDO::FETCH_ASSOC)
 */
$resultAll = $pdo->query("SELECT * FROM employes");
$employes = $resultAll->fetchAll(PDO::FETCH_ASSOC); 

debug($employes); // Affiche tous les employ√©s

// ===========================
// üñ®Ô∏è Affichage format√© des r√©sultats
// ===========================

echo "<h3>Liste compl√®te des employ√©s :</h3>";
foreach ($employes as $employe) {
    echo '<div>';
    echo '<p><strong>ID :</strong> ' . $employe['id'] . '</p>';
    echo '<p><strong>Nom :</strong> ' . $employe['nom'] . '</p>';
    echo '<p><strong>Pr√©nom :</strong> ' . $employe['prenom'] . '</p>';
    echo '</div><hr>';
}

?>
